# =====================================================
# ‚úÖ [Ïã§Ï†ÑÏö© RIFE Interpolation Loop v6.5-Remodel]
# - Colab/Kaggle ÏôÑÏ†Ñ Ìò∏Ìôò
# - 1000Ïû• Ïù¥ÏÉÅ ÎåÄÎüâ ÌîÑÎ†àÏûÑ ÏïàÏ†ï ÏßÄÏõê
# - SSIM ÌíàÏßà ÌèâÍ∞Ä Ï∂îÍ∞Ä
# =====================================================
import os, sys, glob, torch, shutil, re, time
import numpy as np, cv2
from concurrent.futures import ThreadPoolExecutor, as_completed

# -------------------- [1] Í∏∞Î≥∏ Í≤ΩÎ°ú ÏÑ§Ï†ï --------------------
BASE_DIR = "/content/Practical-RIFE"
os.makedirs(BASE_DIR, exist_ok=True)
os.chdir(BASE_DIR)

# ÌïÑÏàò Í≤ΩÎ°ú Ï∂îÍ∞Ä
sys.path.extend([
    BASE_DIR,
    os.path.join(BASE_DIR, "train_log"),
    os.path.join(BASE_DIR, "model")
])

# ÎîîÎ≤ÑÍπÖ
print(f"‚úÖ Í≤ΩÎ°ú Ï§ÄÎπÑ ÏôÑÎ£å: {BASE_DIR}")
print(f"sys.path Ï∂îÍ∞Ä ÏôÑÎ£å: {sys.path[-3:]}")
print(f"train_log/__init__.py Ï°¥Ïû¨: {os.path.exists(os.path.join(BASE_DIR, 'train_log', '__init__.py'))}")
print(f"pytorch_msssim/__init__.py Ï°¥Ïû¨: {os.path.exists(os.path.join(BASE_DIR, 'model', 'pytorch_msssim', '__init__.py'))}")

# -------------------- [2] ÏÇ¨Ïö©Ïûê ÏòµÏÖò --------------------
opt = {
    "scale": 2,             # 2=2x FPS, 4=4x FPS Îì±
    "threads": min(os.cpu_count(), 4),  # T4 ÌôòÍ≤Ω ÏµúÏ†ÅÌôî
    "fps_limit": 60,        # FFmpeg Î≥ëÌï© Ïãú FPS
    "device": "cuda" if torch.cuda.is_available() else "cpu",
    "input_dir": os.path.join(BASE_DIR, "input_frames"),
    "output_dir": os.path.join(BASE_DIR, "output"),
    "model_path": os.path.join(BASE_DIR, "train_log/flownet.pkl"),
}

# -------------------- [3] RIFE Î™®Îç∏ Î°úÎìú --------------------
try:
    from train_log import Model
    print("‚úÖ train_log.Model import ÏÑ±Í≥µ!")
except ImportError as e:
    raise ImportError(f"üö® train_log.Model import Ïã§Ìå®: {e}. train_log/__init__.py ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

# SSIM ÏÜêÏã§ Ìï®Ïàò Î°úÎìú
try:
    from model import SSIM
    ssim_loss = SSIM(window_size=11, size_average=True).to(opt["device"])
    print("‚úÖ SSIM ÏÜêÏã§ Ìï®Ïàò Î°úÎìú ÏÑ±Í≥µ!")
except ImportError as e:
    print(f"‚ö†Ô∏è SSIM import Ïã§Ìå®: {e}. pytorch_msssim/__init__.py ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

device = torch.device(opt["device"])
rife_model = Model()
try:
    rife_model.load_model(os.path.dirname(opt["model_path"]))  # ÎîîÎ†âÌÜ†Î¶¨ Ï†ÑÎã¨
    rife_model.eval()
    rife_model.device()
    print("‚úÖ Î™®Îç∏ Î°úÎî© ÏôÑÎ£å:", opt["model_path"])
except Exception as e:
    raise RuntimeError(f"üö® Î™®Îç∏ Î°úÎìú Ïã§Ìå®: {e}")

# -------------------- [4] Î≥¥Í∞Ñ Ìï®Ïàò --------------------
@torch.inference_mode()
def run_rife_inference(img0_bgr, img1_bgr, timestep=0.5):
    if img0_bgr is None or img1_bgr is None:
        return None
    # T4 Î©îÎ™®Î¶¨ ÏµúÏ†ÅÌôî: 4K Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Ïä§ÏºÄÏùº
    if img0_bgr.shape[0] > 1080:
        img0_bgr = cv2.resize(img0_bgr, (1920, 1080))
        img1_bgr = cv2.resize(img1_bgr, (1920, 1080))
    img0 = cv2.cvtColor(img0_bgr, cv2.COLOR_BGR2RGB)
    img1 = cv2.cvtColor(img1_bgr, cv2.COLOR_BGR2RGB)
    I0 = torch.from_numpy(img0).permute(2, 0, 1).unsqueeze(0).float() / 255.0
    I1 = torch.from_numpy(img1).permute(2, 0, 1).unsqueeze(0).float() / 255.0
    I0, I1 = I0.to(device), I1.to(device)
    out_img = rife_model.inference(I0, I1, scale=max(1.0, 1.0 / timestep))
    out = (out_img[0].cpu().numpy().transpose(1, 2, 0) * 255.0).clip(0, 255).astype(np.uint8)
    out_bgr = cv2.cvtColor(out, cv2.COLOR_RGB2BGR)
    # SSIM Í≥ÑÏÇ∞
    if 'ssim_loss' in globals():
        out_tensor = torch.from_numpy(out).permute(2, 0, 1).unsqueeze(0).float().to(device) / 255.0
        img1_tensor = torch.from_numpy(img1).permute(2, 0, 1).unsqueeze(0).float().to(device) / 255.0
        ssim_value = 1 - 2 * ssim_loss(out_tensor, img1_tensor)  # SSIM (0~1)
        return out_bgr, ssim_value
    return out_bgr, None

# -------------------- [5] ÌîÑÎ†àÏûÑ Ï¥àÍ∏∞Ìôî --------------------
torch.backends.cudnn.deterministic = True
torch.backends.cudnn.benchmark = False
torch.cuda.empty_cache()

INPUT_DIR = opt["input_dir"]
OUTPUT_DIR = opt["output_dir"]
os.makedirs(OUTPUT_DIR, exist_ok=True)

frame_files = sorted(glob.glob(os.path.join(INPUT_DIR, "*.png")))
try:
    frame_files.sort(key=lambda f: int(re.search(r"\d+", os.path.basename(f)).group()))
except:
    print("‚ö†Ô∏è Ïà´Ïûê Ï†ïÎ†¨ Ïã§Ìå® ‚Üí ÏÇ¨Ï†ÑÏàú Ï†ïÎ†¨.")

num_frames = len(frame_files)
if num_frames < 2:
    raise SystemExit("‚ùå ÏµúÏÜå 2Í∞ú ÌîÑÎ†àÏûÑ ÌïÑÏöî")
if num_frames < 1000:
    print(f"‚ö†Ô∏è {num_frames}Ïû• Í∞êÏßÄÎê®. ÏµúÏÜå 1000Ïû• Í∂åÏû•.")

print(f"Ï¥ù {num_frames}Í∞ú ÌîÑÎ†àÏûÑ Í∞êÏßÄÎê® ‚Äî Î≥¥Í∞Ñ ÏãúÏûë")

# Ï≤´ ÌîÑÎ†àÏûÑ Î≥µÏÇ¨
shutil.copy(frame_files[0], os.path.join(OUTPUT_DIR, f"img00000.png"))

# -------------------- [6] ÌîÑÎ¶¨Î°úÎî© --------------------
def preload_pair(i):
    try:
        f1, f2 = frame_files[i], frame_files[i+1]
        img1 = cv2.imread(f1)
        img2 = cv2.imread(f2)
        if img1 is None or img2 is None:
            raise ValueError(f"ÌîÑÎ†àÏûÑ Î°úÎìú Ïã§Ìå®: {f1} ÎòêÎäî {f2}")
        return (i, img1, img2)
    except Exception as e:
        print(f"‚ö†Ô∏è ÌîÑÎ†àÏûÑ {i} Î°úÎìú Ïã§Ìå®: {e}")
        return (i, None, None)

preloaded = {}
print("üß† CPU ÌîÑÎ¶¨Î°úÎî© Ï§ë...")
with ThreadPoolExecutor(max_workers=opt["threads"]) as ex:
    futures = {ex.submit(preload_pair, i): i for i in range(num_frames - 1)}
    for fut in as_completed(futures):
        i, a, b = fut.result()
        if a is not None and b is not None:
            preloaded[i] = (a, b)
print(f"‚úÖ ÌîÑÎ¶¨Î°úÎî© ÏôÑÎ£å: {len(preloaded)}/{num_frames-1} Ïåç ÏÑ±Í≥µ")

# -------------------- [7] Î©îÏù∏ Î£®ÌîÑ --------------------
success, idx = 0, 0
for i in range(num_frames - 1):
    if i not in preloaded:
        print(f"‚ö†Ô∏è {i}Î≤àÏß∏ Ïåç ÎàÑÎùΩ ‚Äî ÏõêÎ≥∏ Î≥µÏÇ¨")
        idx += 1
        shutil.copy(frame_files[i+1], os.path.join(OUTPUT_DIR, f"img{idx:05d}.png"))
        idx += 1
        continue

    img0, img1 = preloaded[i]
    print(f"\n[{i+1}/{num_frames-1}] Î≥¥Í∞Ñ Ï§ë: {os.path.basename(frame_files[i])} ‚Üî {os.path.basename(frame_files[i+1])}")

    for j in range(1, opt["scale"]):
        t = j / opt["scale"]
        out, ssim_value = run_rife_inference(img0, img1, timestep=t)
        if out is None or np.isnan(out).any() or np.max(out) == 0:
            print(f"‚ùå NaN Í∞êÏßÄ (t={t}) ‚Üí Ïä§ÌÇµ")
            continue
        dst = os.path.join(OUTPUT_DIR, f"img{idx + j:05d}.png")
        cv2.imwrite(dst, out)
        print(f"‚úÖ Î≥¥Í∞Ñ ÌîÑÎ†àÏûÑ Ï†ÄÏû•: {os.path.basename(dst)} (SSIM: {ssim_value:.4f} if available)")
        success += 1
        torch.cuda.empty_cache()  # T4 Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨

    idx += opt["scale"]
    shutil.copy(frame_files[i+1], os.path.join(OUTPUT_DIR, f"img{idx:05d}.png"))

print(f"\nüéâ RIFE Î≥¥Í∞Ñ ÏôÑÎ£å! ÏÑ±Í≥µ: {success} ÌîÑÎ†àÏûÑ")
print(f"üìÅ Ï∂úÎ†•: {OUTPUT_DIR}")
print(f"üîó FFmpeg Î≥ëÌï©: cd {OUTPUT_DIR} && ffmpeg -r {opt['fps_limit']} -i img%05d.png -c:v libx264 -pix_fmt yuv420p output.mp4")
