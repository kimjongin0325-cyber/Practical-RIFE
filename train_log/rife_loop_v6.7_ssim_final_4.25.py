# =====================================================
# ‚úÖ [RIFE v4.25 - SSIM Corrected Patch64 Final v6.7]
# - ÏûÖÎ†•: /content/Practical-RIFE/output    (v3.8 Í≤∞Í≥º)
# - Ï∂úÎ†•: /content/Practical-RIFE/output2   (ÏµúÏ¢Ö Í≤∞Í≥º)
# - 4.25 Í∞ÄÏ§ëÏπò Ï†ÑÏö© / SSIM Î°úÍπÖ / NaN Í∞êÏãú / Ìå®Îî© ÏïàÏ†ïÌôî
# =====================================================

import os, glob, torch, shutil, re
import numpy as np, cv2

# -------------------- [1] Í≤ΩÎ°ú ÏÑ§Ï†ï --------------------
BASE_DIR = "/content/Practical-RIFE"
os.makedirs(BASE_DIR, exist_ok=True)
os.chdir(BASE_DIR)

opt = {
    "threads": min(os.cpu_count(), 8),
    "device": "cuda" if torch.cuda.is_available() else "cpu",
    "input_dir":  f"{BASE_DIR}/output",   # ‚úÖ v3.1 FastSafeÍ∞Ä ÎßåÎì† Í≤∞Í≥º
    "output_dir": f"{BASE_DIR}/output2",  # ‚úÖ ÏµúÏ¢Ö Ï∂úÎ†•
    "model_path": f"{BASE_DIR}/train_log/flownet_v425.pkl",  # ‚Üê 4.25 Í∞ÄÏ§ëÏπòÏó¨Ïïº Ìï®
}

os.makedirs(opt["input_dir"], exist_ok=True)
os.makedirs(opt["output_dir"], exist_ok=True)

# -------------------- [2] Î™®Îç∏ Î°úÎìú --------------------
import sys, os
BASE_DIR = "/content/Practical-RIFE"  # ‚úÖ Ïã§Ï†ú ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏
os.chdir(BASE_DIR)                    # ‚úÖ ÏûëÏóÖ ÎîîÎ†âÌÜ†Î¶¨ Ïù¥Îèô
sys.path.append(BASE_DIR)             # ‚úÖ train_log Î™®Îìà Ïù∏Ïãù Î≥¥Ïû•

from train_log.rf425 import Model  # v4.25ÎèÑ ÎèôÏùº ÌÅ¥ÎûòÏä§Î™Ö ÏÇ¨Ïö©
device = torch.device(opt["device"])

model = Model()
model.load_model(os.path.dirname(opt["model_path"]), -1)
model.eval()
model.device()

# SSIM (ÏÑ†ÌÉùÏ†Å): model/__init__.pyÏóê SSIM ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
try:
    from model import SSIM
    ssim_loss = SSIM(window_size=11, size_average=True).to(device)
    print("‚úÖ SSIM Ï§ÄÎπÑ ÏôÑÎ£å (DSSIM‚ÜíSSIM Î≥ÄÌôò)")
except Exception as e:
    ssim_loss = None
    print(f"‚ö†Ô∏è SSIM ÎπÑÌôúÏÑ±Ìôî: {e}")

print(f"‚úÖ Î™®Îç∏ Î°úÎìú ÏôÑÎ£å: {opt['model_path']}")
print(f"üìÇ ÏûÖÎ†• Ìè¥Îçî: {opt['input_dir']}")
print(f"üìÇ Ï∂úÎ†• Ìè¥Îçî: {opt['output_dir']}")

# -------------------- [3] Ïú†Ìã∏ --------------------
def to_tensor(img_bgr):
    rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
    t = torch.from_numpy(rgb).permute(2,0,1).float().unsqueeze(0) / 255.0
    return t.to(device)

def pad64(img):
    h, w, _ = img.shape
    ph = ((h // 64) + 1) * 64 if h % 64 != 0 else h
    pw = ((w // 64) + 1) * 64 if w % 64 != 0 else w
    if ph != h or pw != w:
        img = cv2.copyMakeBorder(img, 0, ph - h, 0, pw - w, cv2.BORDER_REFLECT_101)
    return img, (h, w)

def unpad(img, size):
    h, w = size
    return img[:h, :w]

def contains_nan(t: torch.Tensor) -> bool:
    return torch.isnan(t).any().item() or not torch.isfinite(t).all().item()

# -------------------- [4] Î©îÏù∏ Î£®ÌîÑ --------------------
frame_files = sorted(glob.glob(os.path.join(opt["input_dir"], "*.png")))
try:
    frame_files.sort(key=lambda f: int(re.search(r"\d+", os.path.basename(f)).group()))
except:
    pass

n = len(frame_files)
if n < 2:
    raise SystemExit("‚ùå ÏµúÏÜå 2Í∞ú Ïù¥ÏÉÅÏùò ÌîÑÎ†àÏûÑÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.")

# Ï≤´ ÌîÑÎ†àÏûÑ Î≥µÏÇ¨
shutil.copy(frame_files[0], os.path.join(opt["output_dir"], "img00000.png"))
print(f"üß† Ï¥ù {n}Í∞ú ÌîÑÎ†àÏûÑ Í∞êÏßÄÎê® ‚Äî v4.25 Î≥¥Í∞Ñ ÏãúÏûë")

success = 0
ssim_log = []

for i in range(n - 1):
    f0, f1 = frame_files[i], frame_files[i+1]
    img0 = cv2.imread(f0); img1 = cv2.imread(f1)
    if img0 is None or img1 is None:
        print(f"[{i+1}/{n-1}] ‚ö†Ô∏è ÌîÑÎ†àÏûÑ Î°úÎìú Ïã§Ìå® ‚Üí Í±¥ÎÑàÎúÄ: {f0} or {f1}")
        continue

    # 64Î∞∞Ïàò Ìå®Îî©
    img0p, orig_size = pad64(img0)
    img1p, _        = pad64(img1)

    I0 = to_tensor(img0p)
    I1 = to_tensor(img1p)

    try:
        mid = model.inference(I0, I1, 0.5)
        if contains_nan(mid):
            print(f"[{i+1}/{n-1}] ‚ö†Ô∏è NaN Î∞úÏÉù ‚Üí Í±¥ÎÑàÎúÄ")
            torch.cuda.empty_cache()
            continue

        out = (mid[0].detach().cpu().numpy().transpose(1,2,0) * 255.0).clip(0,255).astype(np.uint8)
        out = cv2.cvtColor(out, cv2.COLOR_RGB2BGR)
        out = unpad(out, orig_size)

        # Ï†ÄÏû•: Î≥¥Í∞Ñ ÌîÑÎ†àÏûÑ + Îã§Ïùå ÏõêÎ≥∏
        cv2.imwrite(os.path.join(opt["output_dir"], f"img{2*i+1:05d}.png"), out)
        shutil.copy(f1, os.path.join(opt["output_dir"], f"img{2*i+2:05d}.png"))

        # SSIM (ÏÑ†ÌÉù)
        if ssim_loss is not None:
            # ssim_lossÎäî DSSIMÏùÑ Î∞òÌôòÌïòÎãà SSIMÏúºÎ°ú Î≥ÄÌôò
            try:
                dssim = ssim_loss(to_tensor(out), to_tensor(img1)).item()
                ssim_val = 1.0 - (2.0 * dssim)
                ssim_log.append(ssim_val)
                print(f"[{i+1}/{n-1}] ‚úÖ {os.path.basename(f0)} ‚Üî {os.path.basename(f1)} | SSIM={ssim_val:.4f}")
            except Exception as e:
                print(f"[{i+1}/{n-1}] ‚úÖ Ï†ÄÏû• ÏôÑÎ£å (SSIM Í≥ÑÏÇ∞ Ïã§Ìå®: {e})")
        else:
            print(f"[{i+1}/{n-1}] ‚úÖ Ï†ÄÏû• ÏôÑÎ£å")

        success += 1

    except Exception as e:
        print(f"[{i+1}/{n-1}] ‚ùå Ïò§Î•ò: {e}")
    finally:
        torch.cuda.synchronize() if device.type == "cuda" else None
        torch.cuda.empty_cache() if device.type == "cuda" else None

print(f"\nüéâ RIFE v4.25 Î≥¥Í∞Ñ ÏôÑÎ£å!")
print(f"‚úÖ ÏÑ±Í≥µ: {success}/{n - 1}")
print(f"üìÅ Ï∂úÎ†•: {opt['output_dir']}")
if ssim_log:
    print(f"üìà ÌèâÍ∑† SSIM: {np.mean(ssim_log):.4f}")
